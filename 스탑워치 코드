
// 독립



#include <stdio.h>
#include <time.h>
#include <windows.h>  // 


void gotoxy(int x, int y, const char* s) {
    COORD pos = { 2 * x,y };
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), pos);
    printf("%s", s);
}

int main() {
   
    clock_t start_time, current_time;
    double elapsed_time;

    // 사용자에게 'a'를 입력하라고 안내
   

    // 타이머 시작 시간 기록
    start_time = clock();
    printf("타이머 시작:\n");

    // 실시간 타이머 출력
    while (1) {
        current_time = clock();
        elapsed_time = ((double)(current_time - start_time)) / CLOCKS_PER_SEC;
        gotoxy(1, 11, "♥ ♥ ♥ ♥"); //HP표시
        // 경과된 시간 출력
        gotoxy(10, 10, " ");
        printf("\r경과된 시간: %.2f 초", 10-elapsed_time);
        fflush(stdout);  // 출력 버퍼를 비워서 실시간으로 출력

        // 1초 대기
        Sleep(50);

        // 종료 조건 예시 (10초 후 종료)
        if (10-elapsed_time <= -0.001) {
            break;
        }
    }

    printf("\n타이머 종료!\n");

    return 0;
}

// gameplay함수에 넣을때 쓴 방식.

/* int gameplay(void) {
    char input;
    struct player player[MAX_PLAYERS] = { {PLAYER_X, PLAYER_Y, 6, 3} };  // x,y,시야너비, 시야높이;
    struct items items[MAX_ITEMS] = { {0,0,"key"},{0,0,"key"},{0,0,'\0'},{0,0,'\0'},{0,0,'\0'} };

    clock_t start_time, current_time;
    double elapsed_time;

    start_time = clock();

    for (int i = 0; i < MAX_ITEMS; i++) {
        Itemcoord(&items[i], player);
    }
   
    while (1) {
        current_time = clock();

        elapsed_time = ((double)(current_time - start_time)) / CLOCKS_PER_SEC;



        HP_print(HP);  // HP_print(HP)함수는 정수 HP를 전달받아서 HP수 만큼의 하트를 화면의 상단에 출력합니다.

        Sleep(5);

        gotoxy(10, 10, " ");

        printf("\ 30- %.2f 초", elapsed_time);

        fflush(stdout);

       
        if (elapsed_time >= 20.0) {
            break;
        }

        input = movePlayer(player, items);
        if (input == BACK) return BACK;
        if (input == CLEAR) return CLEAR;
        //  if (input == FAIL) return FAIL;
        // if (input == SUBMIT) return BACK;
    }
    return 0;
} */
